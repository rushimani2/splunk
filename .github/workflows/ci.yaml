name: Run cdk8s Demo

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  demo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Kind Kubernetes cluster
        uses: helm/kind-action@v1.8.0

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin
          kubectl version --client

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: Install cdk8s CLI
        run: |
          curl -fsSL https://github.com/cdk8s-team/cdk8s-cli/releases/latest/download/cdk8s-linux-x64 > cdk8s
          chmod +x cdk8s
          sudo mv cdk8s /usr/local/bin
          cdk8s --version

      - name: Clone cdk8s demo
        run: |
          git clone https://github.com/vfarcic/cdk8s-demo.git
          cd cdk8s-demo

          # Add Helm repo and install Crossplane
          helm repo add crossplane-stable https://charts.crossplane.io/stable
          helm repo update

          helm upgrade --install crossplane crossplane-stable/crossplane \
            --namespace crossplane-system \
            --create-namespace \
            --wait

          # Wait until pods are ready (optional)
          kubectl wait --for=condition=Ready pods --all --namespace crossplane-system --timeout=120s

          # Apply providers (simulate if you want to skip actual AWS provisioning)
          kubectl apply --filename crossplane/provider-aws.yaml || true
          kubectl apply --filename crossplane/provider-sql.yaml || true

          # Optional: Run cdk8s commands
          # cd cdk8s-demo
          # cdk8s init go-app

      - name: Confirm Cluster is Working
        run: |
          kubectl get nodes
          kubectl get pods -A
